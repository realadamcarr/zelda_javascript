import { RawIntegrationParameters } from "../raw";
var IntegrationParameters = /** @class */ (function () {
    function IntegrationParameters(raw) {
        this.raw = raw || new RawIntegrationParameters();
    }
    /**
     * Free the WASM memory used by these integration parameters.
     */
    IntegrationParameters.prototype.free = function () {
        this.raw.free();
        this.raw = undefined;
    };
    Object.defineProperty(IntegrationParameters.prototype, "dt", {
        /**
         * The timestep length (default: `1.0 / 60.0`)
         */
        get: function () {
            return this.raw.dt;
        },
        set: function (value) {
            this.raw.dt = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IntegrationParameters.prototype, "erp", {
        /**
         * The Error Reduction Parameter in `[0, 1]` is the proportion of
         * the positional error to be corrected at each time step (default: `0.2`).
         */
        get: function () {
            return this.raw.erp;
        },
        set: function (value) {
            this.raw.erp = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IntegrationParameters.prototype, "jointErp", {
        /**
         * The Error Reduction Parameter for joints in `[0, 1]` is the proportion of
         * the positional error to be corrected at each time step (default: `0.2`).
         */
        get: function () {
            return this.raw.jointErp;
        },
        set: function (value) {
            this.raw.jointErp = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IntegrationParameters.prototype, "warmstartCoeff", {
        /**
         * Each cached impulse are multiplied by this coefficient in `[0, 1]`
         * when they are re-used to initialize the solver (default `1.0`).
         */
        get: function () {
            return this.raw.warmstartCoeff;
        },
        set: function (value) {
            this.raw.warmstartCoeff = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IntegrationParameters.prototype, "allowedLinearError", {
        /**
         * Amount of penetration the engine wont attempt to correct (default: `0.001m`).
         */
        get: function () {
            return this.raw.allowedLinearError;
        },
        set: function (value) {
            this.raw.allowedLinearError = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IntegrationParameters.prototype, "predictionDistance", {
        /**
         * The maximal distance separating two objects that will generate predictive contacts (default: `0.002`).
         */
        get: function () {
            return this.raw.predictionDistance;
        },
        set: function (value) {
            this.raw.predictionDistance = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IntegrationParameters.prototype, "allowedAngularError", {
        /**
         * Amount of angular drift of joint limits the engine wont
         * attempt to correct (default: `0.001rad`).
         */
        get: function () {
            return this.raw.allowedAngularError;
        },
        set: function (value) {
            this.raw.allowedAngularError = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IntegrationParameters.prototype, "maxLinearCorrection", {
        /**
         * Maximum linear correction during one step of the non-linear position solver (default: `0.2`).
         */
        get: function () {
            return this.raw.maxLinearCorrection;
        },
        set: function (value) {
            this.raw.maxLinearCorrection = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IntegrationParameters.prototype, "maxAngularCorrection", {
        /**
         * Maximum angular correction during one step of the non-linear position solver (default: `0.2`).
         */
        get: function () {
            return this.raw.maxAngularCorrection;
        },
        set: function (value) {
            this.raw.maxAngularCorrection = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IntegrationParameters.prototype, "maxVelocityIterations", {
        /**
         * Maximum number of iterations performed by the velocity constraints solver (default: `4`).
         */
        get: function () {
            return this.raw.maxVelocityIterations;
        },
        set: function (value) {
            this.raw.maxVelocityIterations = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IntegrationParameters.prototype, "maxPositionIterations", {
        /**
         * Maximum number of iterations performed by the position-based constraints solver (default: `1`).
         */
        get: function () {
            return this.raw.maxPositionIterations;
        },
        set: function (value) {
            this.raw.maxPositionIterations = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IntegrationParameters.prototype, "minIslandSize", {
        /**
         * Minimum number of dynamic bodies in each active island (default: `128`).
         */
        get: function () {
            return this.raw.minIslandSize;
        },
        set: function (value) {
            this.raw.minIslandSize = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IntegrationParameters.prototype, "maxCcdSubsteps", {
        /**
         * Maximum number of substeps performed by the  solver (default: `1`).
         */
        get: function () {
            return this.raw.maxCcdSubsteps;
        },
        set: function (value) {
            this.raw.maxCcdSubsteps = value;
        },
        enumerable: false,
        configurable: true
    });
    return IntegrationParameters;
}());
export { IntegrationParameters };
//# sourceMappingURL=integration_parameters.js.map