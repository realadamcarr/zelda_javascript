import { RawJointSet } from "../raw";
import { Joint } from "./joint";
/**
 * A set of joints.
 *
 * To avoid leaking WASM resources, this MUST be freed manually with `jointSet.free()`
 * once you are done using it (and all the joints it created).
 */
var JointSet = /** @class */ (function () {
    function JointSet(raw) {
        this.raw = raw || new RawJointSet();
    }
    /**
     * Release the WASM memory occupied by this joint set.
     */
    JointSet.prototype.free = function () {
        this.raw.free();
        this.raw = undefined;
    };
    /**
     * Creates a new joint and return its integer handle.
     *
     * @param bodies - The set of rigid-bodies containing the bodies the joint is attached to.
     * @param desc - The joint's parameters.
     * @param parent1 - The handle of the first rigid-body this joint is attached to.
     * @param parent2 - The handle of the second rigid-body this joint is attached to.
     */
    JointSet.prototype.createJoint = function (bodies, desc, parent1, parent2) {
        var rawParams = desc.intoRaw();
        var result = this.raw.createJoint(bodies.raw, rawParams, parent1, parent2);
        rawParams.free();
        return result;
    };
    /**
     * Remove a joint from this set.
     *
     * @param handle - The integer handle of the joint.
     * @param bodies - The set of rigid-bodies containing the rigid-bodies attached by the removed joint.
     * @param wake_up - If `true`, the rigid-bodies attached by the removed joint will be woken-up automatically.
     */
    JointSet.prototype.remove = function (handle, islands, bodies, wake_up) {
        this.raw.remove(handle, islands.raw, bodies.raw, wake_up);
    };
    /**
     * The number of joints on this set.
     */
    JointSet.prototype.len = function () {
        return this.raw.len();
    };
    /**
     * Does this set contain a joint with the given handle?
     *
     * @param handle - The joint handle to check.
     */
    JointSet.prototype.contains = function (handle) {
        return this.raw.contains(handle);
    };
    /**
     * Gets the joint with the given handle.
     *
     * Returns `null` if no joint with the specified handle exists.
     * Note that two distinct calls with the same `handle` will return two
     * different JavaScript objects that both represent the same joint.
     *
     * @param handle - The integer handle of the joint to retrieve.
     */
    JointSet.prototype.get = function (handle) {
        if (this.raw.contains(handle)) {
            return new Joint(this.raw, handle);
        }
        else {
            return null;
        }
    };
    /**
     * Applies the given closure to each joints contained by this set.
     *
     * @param f - The closure to apply.
     */
    JointSet.prototype.forEachJoint = function (f) {
        var _this = this;
        this.raw.forEachJointHandle(function (handle) {
            f(new Joint(_this.raw, handle));
        });
    };
    /**
     * Applies the given closure to the handle of each joints contained by this set.
     *
     * @param f - The closure to apply.
     */
    JointSet.prototype.forEachJointHandle = function (f) {
        this.raw.forEachJointHandle(f);
    };
    return JointSet;
}());
export { JointSet };
//# sourceMappingURL=joint_set.js.map