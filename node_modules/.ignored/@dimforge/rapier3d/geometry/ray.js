import { VectorOps } from "../math";
/**
 * A ray. This is a directed half-line.
 */
var Ray = /** @class */ (function () {
    /**
     * Builds a ray from its origin and direction.
     *
     * @param origin - The ray's starting point.
     * @param dir - The ray's direction of propagation.
     */
    function Ray(origin, dir) {
        this.origin = origin;
        this.dir = dir;
    }
    return Ray;
}());
export { Ray };
/**
 * The intersection between a ray and a collider.
 */
var RayColliderIntersection = /** @class */ (function () {
    function RayColliderIntersection(colliderHandle, toi, normal) {
        this.colliderHandle = colliderHandle;
        this.toi = toi;
        this.normal = normal;
    }
    RayColliderIntersection.fromRaw = function (raw) {
        if (!raw)
            return null;
        var result = new RayColliderIntersection(raw.colliderHandle(), raw.toi(), VectorOps.fromRaw(raw.normal()));
        raw.free();
        return result;
    };
    return RayColliderIntersection;
}());
export { RayColliderIntersection };
/**
 * The time of impact between a ray and a collider.
 */
var RayColliderToi = /** @class */ (function () {
    function RayColliderToi(colliderHandle, toi) {
        this.colliderHandle = colliderHandle;
        this.toi = toi;
    }
    RayColliderToi.fromRaw = function (raw) {
        if (!raw)
            return null;
        var result = new RayColliderToi(raw.colliderHandle(), raw.toi());
        raw.free();
        return result;
    };
    return RayColliderToi;
}());
export { RayColliderToi };
//# sourceMappingURL=ray.js.map