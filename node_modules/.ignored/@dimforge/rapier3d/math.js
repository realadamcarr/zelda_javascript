import { RawVector, RawRotation } from "./raw";
/**
 * A 3D vector.
 */
var Vector3 = /** @class */ (function () {
    function Vector3(x, y, z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }
    return Vector3;
}());
export { Vector3 };
var VectorOps = /** @class */ (function () {
    function VectorOps() {
    }
    VectorOps.new = function (x, y, z) {
        return new Vector3(x, y, z);
    };
    VectorOps.intoRaw = function (v) {
        return new RawVector(v.x, v.y, v.z);
    };
    VectorOps.zeros = function () {
        return VectorOps.new(0.0, 0.0, 0.0);
    };
    // FIXME: type ram: RawVector?
    VectorOps.fromRaw = function (raw) {
        if (!raw)
            return null;
        var res = VectorOps.new(raw.x, raw.y, raw.z);
        raw.free();
        return res;
    };
    return VectorOps;
}());
export { VectorOps };
/**
 * A quaternion.
 */
var Quaternion = /** @class */ (function () {
    function Quaternion(x, y, z, w) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
    }
    return Quaternion;
}());
export { Quaternion };
var RotationOps = /** @class */ (function () {
    function RotationOps() {
    }
    RotationOps.identity = function () {
        return new Quaternion(0.0, 0.0, 0.0, 1.0);
    };
    RotationOps.fromRaw = function (raw) {
        if (!raw)
            return null;
        var res = new Quaternion(raw.x, raw.y, raw.z, raw.w);
        raw.free();
        return res;
    };
    RotationOps.intoRaw = function (rot) {
        return new RawRotation(rot.x, rot.y, rot.z, rot.w);
    };
    return RotationOps;
}());
export { RotationOps };
// #endif
//# sourceMappingURL=math.js.map