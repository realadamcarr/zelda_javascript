import { RawPhysicsPipeline } from "../raw";
import { VectorOps } from "../math";
var PhysicsPipeline = /** @class */ (function () {
    function PhysicsPipeline(raw) {
        this.raw = raw || new RawPhysicsPipeline();
    }
    PhysicsPipeline.prototype.free = function () {
        this.raw.free();
        this.raw = undefined;
    };
    PhysicsPipeline.prototype.step = function (gravity, integrationParameters, islands, broadPhase, narrowPhase, bodies, colliders, joints, ccdSolver, eventQueue, hooks) {
        var rawG = VectorOps.intoRaw(gravity);
        if (!!eventQueue) {
            this.raw.stepWithEvents(rawG, integrationParameters.raw, islands.raw, broadPhase.raw, narrowPhase.raw, bodies.raw, colliders.raw, joints.raw, ccdSolver.raw, eventQueue.raw, hooks, !!hooks ? hooks.filterContactPair : null, !!hooks ? hooks.filterIntersectionPair : null);
        }
        else {
            this.raw.step(rawG, integrationParameters.raw, islands.raw, broadPhase.raw, narrowPhase.raw, bodies.raw, colliders.raw, joints.raw, ccdSolver.raw);
        }
        rawG.free();
    };
    /**
     * Removes a rigid-body, and everything attached to it, from the given sets.
     * @param handle - The handle of the rigid-body to remove.
     * @param bodies - The set containing the rigid-body to remove.
     * @param colliders - The set containing the colliders attached to the rigid-body to remove.
     * @param joints - The set containing the joints attached to the rigid-body to remove.
     */
    PhysicsPipeline.prototype.removeRigidBody = function (handle, islands, bodies, colliders, joints) {
        this.raw.removeRigidBody(handle, islands.raw, bodies.raw, colliders.raw, joints.raw);
    };
    /**
     * Remove a collider.
     * @param handle - The handle of the collider to remove.
     * @param bodies - The set of rigid-bodies containing the parent of the collider to remove.
     * @param colliders - The set of colliders containing the collider to remove.
     */
    PhysicsPipeline.prototype.removeCollider = function (handle, islands, bodies, colliders) {
        this.raw.removeCollider(handle, islands.raw, bodies.raw, colliders.raw);
    };
    return PhysicsPipeline;
}());
export { PhysicsPipeline };
//# sourceMappingURL=physics_pipeline.js.map