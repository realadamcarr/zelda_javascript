import { RawRigidBodySet } from "../raw";
import { VectorOps, RotationOps } from '../math';
import { RigidBody } from './rigid_body';
/**
 * A set of rigid bodies that can be handled by a physics pipeline.
 *
 * To avoid leaking WASM resources, this MUST be freed manually with `jointSet.free()`
 * once you are done using it (and all the rigid-bodies it created).
 */
var RigidBodySet = /** @class */ (function () {
    function RigidBodySet(raw) {
        this.raw = raw || new RawRigidBodySet();
    }
    /**
     * Release the WASM memory occupied by this rigid-body set.
     */
    RigidBodySet.prototype.free = function () {
        this.raw.free();
        this.raw = undefined;
    };
    /**
     * Creates a new rigid-body and return its integer handle.
     *
     * @param desc - The description of the rigid-body to create.
     */
    RigidBodySet.prototype.createRigidBody = function (desc) {
        var rawTra = VectorOps.intoRaw(desc.translation);
        var rawRot = RotationOps.intoRaw(desc.rotation);
        var rawLv = VectorOps.intoRaw(desc.linvel);
        var rawCom = VectorOps.intoRaw(desc.centerOfMass);
        // #if DIM3
        var rawAv = VectorOps.intoRaw(desc.angvel);
        var rawPrincipalInertia = VectorOps.intoRaw(desc.principalAngularInertia);
        var rawInertiaFrame = RotationOps.intoRaw(desc.angularInertiaLocalFrame);
        // #endif
        var handle = this.raw.createRigidBody(rawTra, rawRot, desc.gravityScale, desc.mass, desc.translationsEnabled, rawCom, rawLv, 
        // #if DIM3
        rawAv, rawPrincipalInertia, rawInertiaFrame, desc.rotationsEnabledX, desc.rotationsEnabledY, desc.rotationsEnabledZ, 
        // #endif
        desc.linearDamping, desc.angularDamping, desc.status, desc.canSleep, desc.ccdEnabled);
        rawTra.free();
        rawRot.free();
        rawLv.free();
        rawCom.free();
        // #if DIM3
        rawAv.free();
        rawPrincipalInertia.free();
        rawInertiaFrame.free();
        // #endif
        return handle;
    };
    /**
     * Removes a rigid-body from this set.
     *
     * This will also remove all the colliders and joints attached to the rigid-body.
     *
     * @param handle - The integer handle of the rigid-body to remove.
     * @param colliders - The set of colliders that may contain colliders attached to the removed rigid-body.
     * @param joints - The set of joints that may contain joints attached to the removed rigid-body.
     */
    RigidBodySet.prototype.remove = function (handle, islands, colliders, joints) {
        this.raw.remove(handle, islands.raw, colliders.raw, joints.raw);
    };
    /**
     * The number of rigid-bodies on this set.
     */
    RigidBodySet.prototype.len = function () {
        return this.raw.len();
    };
    /**
     * Does this set contain a rigid-body with the given handle?
     *
     * @param handle - The rigid-body handle to check.
     */
    RigidBodySet.prototype.contains = function (handle) {
        return this.raw.contains(handle);
    };
    /**
     * Gets the rigid-body with the given handle.
     *
     * @param handle - The handle of the rigid-body to retrieve.
     */
    RigidBodySet.prototype.get = function (handle) {
        if (this.raw.contains(handle)) {
            return new RigidBody(this.raw, handle);
        }
        else {
            return null;
        }
    };
    /**
     * Applies the given closure to each rigid-body contained by this set.
     *
     * @param f - The closure to apply.
     */
    RigidBodySet.prototype.forEachRigidBody = function (f) {
        var _this = this;
        this.forEachRigidBodyHandle(function (handle) {
            f(new RigidBody(_this.raw, handle));
        });
    };
    /**
     * Applies the given closure to the handle of each rigid-body contained by this set.
     *
     * @param f - The closure to apply.
     */
    RigidBodySet.prototype.forEachRigidBodyHandle = function (f) {
        this.raw.forEachRigidBodyHandle(f);
    };
    /**
     * Applies the given closure to each active rigid-bodies contained by this set.
     *
     * A rigid-body is active if it is not sleeping, i.e., if it moved recently.
     *
     * @param f - The closure to apply.
     */
    RigidBodySet.prototype.forEachActiveRigidBody = function (islands, f) {
        var _this = this;
        islands.forEachActiveRigidBodyHandle(function (handle) {
            f(new RigidBody(_this.raw, handle));
        });
    };
    return RigidBodySet;
}());
export { RigidBodySet };
//# sourceMappingURL=rigid_body_set.js.map