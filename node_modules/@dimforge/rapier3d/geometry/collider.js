import { RotationOps, VectorOps } from '../math';
import { CoefficientCombineRule } from '../dynamics';
import { Cuboid, Ball, Capsule, TriMesh, Polyline, Heightfield, Segment, Triangle, RoundTriangle, RoundCuboid, 
// #if DIM3
Cylinder, RoundCylinder, Cone, RoundCone, ConvexPolyhedron, RoundConvexPolyhedron,
// #endif
 } from './index';
/// Flags affecting whether or not collision-detection happens between two colliders
/// depending on the type of rigid-bodies they are attached to.
export var ActiveCollisionTypes;
(function (ActiveCollisionTypes) {
    /// Enable collision-detection between a collider attached to a dynamic body
    /// and another collider attached to a dynamic body.
    ActiveCollisionTypes[ActiveCollisionTypes["DYNAMIC_DYNAMIC"] = 1] = "DYNAMIC_DYNAMIC";
    /// Enable collision-detection between a collider attached to a dynamic body
    /// and another collider attached to a kinematic body.
    ActiveCollisionTypes[ActiveCollisionTypes["DYNAMIC_KINEMATIC"] = 12] = "DYNAMIC_KINEMATIC";
    /// Enable collision-detection between a collider attached to a dynamic body
    /// and another collider attached to a static body (or not attached to any body).
    ActiveCollisionTypes[ActiveCollisionTypes["DYNAMIC_STATIC"] = 2] = "DYNAMIC_STATIC";
    /// Enable collision-detection between a collider attached to a kinematic body
    /// and another collider attached to a kinematic body.
    ActiveCollisionTypes[ActiveCollisionTypes["KINEMATIC_KINEMATIC"] = 52224] = "KINEMATIC_KINEMATIC";
    /// Enable collision-detection between a collider attached to a kinematic body
    /// and another collider attached to a static body (or not attached to any body).
    ActiveCollisionTypes[ActiveCollisionTypes["KINEMATIC_STATIC"] = 8704] = "KINEMATIC_STATIC";
    /// Enable collision-detection between a collider attached to a static body (or
    /// not attached to any body) and another collider attached to a static body (or
    /// not attached to any body).
    ActiveCollisionTypes[ActiveCollisionTypes["STATIC_STATIC"] = 32] = "STATIC_STATIC";
    /// The default active collision types, enabling collisions between a dynamic body
    /// and another body of any type, but not enabling collisions between two non-dynamic bodies.
    ActiveCollisionTypes[ActiveCollisionTypes["DEFAULT"] = 15] = "DEFAULT";
    /// Enable collisions between any kind of rigid-bodies (including between two non-dynamic bodies).
    ActiveCollisionTypes[ActiveCollisionTypes["ALL"] = 60943] = "ALL";
})(ActiveCollisionTypes || (ActiveCollisionTypes = {}));
/**
 * A geometric entity that can be attached to a body so it can be affected
 * by contacts and proximity queries.
 */
var Collider = /** @class */ (function () {
    function Collider(rawSet, handle) {
        this.rawSet = rawSet;
        this.handle = handle;
    }
    /**
     * Checks if this collider is still valid (i.e. that it has
     * not been deleted from the collider set yet.
     */
    Collider.prototype.isValid = function () {
        return this.rawSet.contains(this.handle);
    };
    /**
     * The world-space translation of this rigid-body.
     */
    Collider.prototype.translation = function () {
        return VectorOps.fromRaw(this.rawSet.coTranslation(this.handle));
    };
    /**
     * The world-space orientation of this rigid-body.
     */
    Collider.prototype.rotation = function () {
        return RotationOps.fromRaw(this.rawSet.coRotation(this.handle));
    };
    /**
     * Is this collider a sensor?
     */
    Collider.prototype.isSensor = function () {
        return this.rawSet.coIsSensor(this.handle);
    };
    /**
     * The type of the shape of this collider.
     */
    Collider.prototype.shapeType = function () {
        return this.rawSet.coShapeType(this.handle);
    };
    /**
     * The half-extents of this collider if it is a cuboid shape.
     */
    Collider.prototype.halfExtents = function () {
        return VectorOps.fromRaw(this.rawSet.coHalfExtents(this.handle));
    };
    /**
     * The radius of this collider if it is a ball, cylinder, capsule, or cone shape.
     */
    Collider.prototype.radius = function () {
        return this.rawSet.coRadius(this.handle);
    };
    /**
     * The radius of the round edges of this collider if it is a round cylinder.
     */
    Collider.prototype.roundRadius = function () {
        return this.rawSet.coRoundRadius(this.handle);
    };
    /**
     * The half height of this collider if it is a cylinder, capsule, or cone shape.
     */
    Collider.prototype.halfHeight = function () {
        return this.rawSet.coHalfHeight(this.handle);
    };
    /**
     * If this collider has a triangle mesh, polyline, convex polygon, or convex polyhedron shape,
     * this returns the vertex buffer of said shape.
     */
    Collider.prototype.vertices = function () {
        return this.rawSet.coVertices(this.handle);
    };
    /**
     * If this collider has a triangle mesh, polyline, or convex polyhedron shape,
     * this returns the index buffer of said shape.
     */
    Collider.prototype.indices = function () {
        return this.rawSet.coIndices(this.handle);
    };
    /**
     * If this collider has a heightfield shape, this returns the heights buffer of
     * the heightfield.
     * In 3D, the returned height matrix is provided in column-major order.
     */
    Collider.prototype.heightfieldHeights = function () {
        return this.rawSet.coHeightfieldHeights(this.handle);
    };
    /**
     * If this collider has a heightfield shape, this returns the scale
     * applied to it.
     */
    Collider.prototype.heightfieldScale = function () {
        var scale = this.rawSet.coHeightfieldScale(this.handle);
        return VectorOps.fromRaw(scale);
    };
    // #if DIM3
    /**
     * If this collider has a heightfield shape, this returns the number of
     * rows of its height matrix.
     */
    Collider.prototype.heightfieldNRows = function () {
        return this.rawSet.coHeightfieldNRows(this.handle);
    };
    /**
     * If this collider has a heightfield shape, this returns the number of
     * columns of its height matrix.
     */
    Collider.prototype.heightfieldNCols = function () {
        return this.rawSet.coHeightfieldNCols(this.handle);
    };
    // #endif
    /**
     * The unique integer identifier of the rigid-body this collider is attached to.
     */
    Collider.prototype.parent = function () {
        return this.rawSet.coParent(this.handle);
    };
    /**
     * The friction coefficient of this collider.
     */
    Collider.prototype.friction = function () {
        return this.rawSet.coFriction(this.handle);
    };
    /**
     * The density of this collider.
     */
    Collider.prototype.density = function () {
        return this.rawSet.coDensity(this.handle);
    };
    /**
     * The collision groups of this collider.
     */
    Collider.prototype.collisionGroups = function () {
        return this.rawSet.coCollisionGroups(this.handle);
    };
    /**
     * The solver gorups of this collider.
     */
    Collider.prototype.solverGroups = function () {
        return this.rawSet.coSolverGroups(this.handle);
    };
    Collider.prototype.activeHooks = function () {
        return this.rawSet.coActiveHooks(this.handle);
    };
    return Collider;
}());
export { Collider };
var ColliderDesc = /** @class */ (function () {
    /**
     * Initializes a collider descriptor from the collision shape.
     *
     * @param shape - The shape of the collider being built.
     */
    function ColliderDesc(shape) {
        this.shape = shape;
        this.density = null;
        this.friction = 0.5;
        this.restitution = 0.0;
        this.rotation = RotationOps.identity();
        this.translation = VectorOps.zeros();
        this.isSensor = false;
        this.collisionGroups = 4294967295;
        this.solverGroups = 4294967295;
        this.frictionCombineRule = CoefficientCombineRule.Average;
        this.restitutionCombineRule = CoefficientCombineRule.Average;
        this.activeCollisionTypes = ActiveCollisionTypes.DEFAULT;
        this.activeEvents = 0;
        this.activeHooks = 0;
    }
    /**
     * Create a new collider descriptor with a ball shape.
     *
     * @param radius - The radius of the ball.
     */
    ColliderDesc.ball = function (radius) {
        var shape = new Ball(radius);
        return new ColliderDesc(shape);
    };
    /**
     * Create a new collider descriptor with a capsule shape.
     *
     * @param halfHeight - The half-height of the capsule, along the `y` axis.
     * @param radius - The radius of the capsule basis.
     */
    ColliderDesc.capsule = function (halfHeight, radius) {
        var shape = new Capsule(halfHeight, radius);
        return new ColliderDesc(shape);
    };
    /**
     * Creates a new segment shape.
     *
     * @param a - The first point of the segment.
     * @param b - The second point of the segment.
     */
    ColliderDesc.segment = function (a, b) {
        var shape = new Segment(a, b);
        return new ColliderDesc(shape);
    };
    /**
     * Creates a new triangle shape.
     *
     * @param a - The first point of the triangle.
     * @param b - The second point of the triangle.
     * @param c - The third point of the triangle.
     */
    ColliderDesc.triangle = function (a, b, c) {
        var shape = new Triangle(a, b, c);
        return new ColliderDesc(shape);
    };
    /**
     * Creates a new triangle shape with round corners.
     *
     * @param a - The first point of the triangle.
     * @param b - The second point of the triangle.
     * @param c - The third point of the triangle.
     * @param borderRadius - The radius of the borders of this triangle. In 3D,
     *   this is also equal to half the thickness of the triangle.
     */
    ColliderDesc.roundTriangle = function (a, b, c, borderRadius) {
        var shape = new RoundTriangle(a, b, c, borderRadius);
        return new ColliderDesc(shape);
    };
    /**
     * Creates a new collider descriptor with a polyline shape.
     *
     * @param vertices - The coordinates of the polyline's vertices.
     * @param indices - The indices of the polyline's segments. If this is `null`,
     *    the vertices are assumed to describe a line strip.
     */
    ColliderDesc.polyline = function (vertices, indices) {
        var shape = new Polyline(vertices, indices);
        return new ColliderDesc(shape);
    };
    /**
     * Creates a new collider descriptor with a triangle mesh shape.
     *
     * @param vertices - The coordinates of the triangle mesh's vertices.
     * @param indices - The indices of the triangle mesh's triangles.
     */
    ColliderDesc.trimesh = function (vertices, indices) {
        var shape = new TriMesh(vertices, indices);
        return new ColliderDesc(shape);
    };
    // #if DIM3
    /**
     * Creates a new collider descriptor with a cuboid shape.
     *
     * @param hx - The half-width of the rectangle along its local `x` axis.
     * @param hy - The half-width of the rectangle along its local `y` axis.
     * @param hz - The half-width of the rectangle along its local `z` axis.
     */
    ColliderDesc.cuboid = function (hx, hy, hz) {
        var shape = new Cuboid(hx, hy, hz);
        return new ColliderDesc(shape);
    };
    /**
     * Creates a new collider descriptor with a rectangular shape with round borders.
     *
     * @param hx - The half-width of the rectangle along its local `x` axis.
     * @param hy - The half-width of the rectangle along its local `y` axis.
     * @param hz - The half-width of the rectangle along its local `z` axis.
     * @param borderRadius - The radius of the cuboid's borders.
     */
    ColliderDesc.roundCuboid = function (hx, hy, hz, borderRadius) {
        var shape = new RoundCuboid(hx, hy, hz, borderRadius);
        return new ColliderDesc(shape);
    };
    /**
     * Creates a new collider descriptor with a heightfield shape.
     *
     * @param nrows − The number of rows in the heights matrix.
     * @param ncols - The number of columns in the heights matrix.
     * @param heights - The heights of the heightfield along its local `y` axis,
     *                  provided as a matrix stored in column-major order.
     * @param scale - The scale factor applied to the heightfield.
     */
    ColliderDesc.heightfield = function (nrows, ncols, heights, scale) {
        var shape = new Heightfield(nrows, ncols, heights, scale);
        return new ColliderDesc(shape);
    };
    /**
     * Create a new collider descriptor with a cylinder shape.
     *
     * @param halfHeight - The half-height of the cylinder, along the `y` axis.
     * @param radius - The radius of the cylinder basis.
     */
    ColliderDesc.cylinder = function (halfHeight, radius) {
        var shape = new Cylinder(halfHeight, radius);
        return new ColliderDesc(shape);
    };
    /**
     * Create a new collider descriptor with a cylinder shape with rounded corners.
     *
     * @param halfHeight - The half-height of the cylinder, along the `y` axis.
     * @param radius - The radius of the cylinder basis.
     * @param borderRadius - The radius of the cylinder's rounded edges and vertices.
     */
    ColliderDesc.roundCylinder = function (halfHeight, radius, borderRadius) {
        var shape = new RoundCylinder(halfHeight, radius, borderRadius);
        return new ColliderDesc(shape);
    };
    /**
     * Create a new collider descriptor with a cone shape.
     *
     * @param halfHeight - The half-height of the cone, along the `y` axis.
     * @param radius - The radius of the cone basis.
     */
    ColliderDesc.cone = function (halfHeight, radius) {
        var shape = new Cone(halfHeight, radius);
        return new ColliderDesc(shape);
    };
    /**
     * Create a new collider descriptor with a cone shape with rounded corners.
     *
     * @param halfHeight - The half-height of the cone, along the `y` axis.
     * @param radius - The radius of the cone basis.
     * @param borderRadius - The radius of the cone's rounded edges and vertices.
     */
    ColliderDesc.roundCone = function (halfHeight, radius, borderRadius) {
        var shape = new RoundCone(halfHeight, radius, borderRadius);
        return new ColliderDesc(shape);
    };
    /**
     * Computes the convex-hull of the given points and use the resulting
     * convex polyhedron as the shape for this new collider descriptor.
     *
     * @param points - The point that will be used to compute the convex-hull.
     */
    ColliderDesc.convexHull = function (points) {
        var shape = new ConvexPolyhedron(points, null);
        return new ColliderDesc(shape);
    };
    /**
     * Creates a new collider descriptor that uses the given set of points assumed
     * to form a convex polyline (no convex-hull computation will be done).
     *
     * @param vertices - The vertices of the convex polyline.
     */
    ColliderDesc.convexMesh = function (vertices, indices) {
        var shape = new ConvexPolyhedron(vertices, indices);
        return new ColliderDesc(shape);
    };
    /**
     * Computes the convex-hull of the given points and use the resulting
     * convex polyhedron as the shape for this new collider descriptor. A
     * border is added to that convex polyhedron to give it round corners.
     *
     * @param points - The point that will be used to compute the convex-hull.
     * @param borderRadius - The radius of the round border added to the convex polyhedron.
     */
    ColliderDesc.roundConvexHull = function (points, borderRadius) {
        var shape = new RoundConvexPolyhedron(points, null, borderRadius);
        return new ColliderDesc(shape);
    };
    /**
     * Creates a new collider descriptor that uses the given set of points assumed
     * to form a round convex polyline (no convex-hull computation will be done).
     *
     * @param vertices - The vertices of the convex polyline.
     * @param borderRadius - The radius of the round border added to the convex polyline.
     */
    ColliderDesc.roundConvexMesh = function (vertices, indices, borderRadius) {
        var shape = new RoundConvexPolyhedron(vertices, indices, borderRadius);
        return new ColliderDesc(shape);
    };
    // #endif
    // #if DIM3
    /**
     * Sets the position of the collider to be created relative to the rigid-body it is attached to.
     */
    ColliderDesc.prototype.setTranslation = function (x, y, z) {
        if (typeof x != "number" || typeof y != "number" || typeof z != "number")
            throw TypeError("The translation components must be numbers.");
        this.translation = { x: x, y: y, z: z };
        return this;
    };
    // #endif
    /**
     * Sets the rotation of the collider to be created relative to the rigid-body it is attached to.
     *
     * @param rot - The rotation of the collider to be created relative to the rigid-body it is attached to.
     */
    ColliderDesc.prototype.setRotation = function (rot) {
        this.rotation = rot;
        return this;
    };
    /**
     * Sets whether or not the collider being created is a sensor.
     *
     * A sensor collider does not take part of the physics simulation, but generates
     * proximity events.
     *
     * @param is - Set to `true` of the collider built is to be a sensor.
     */
    ColliderDesc.prototype.setIsSensor = function (is) {
        this.isSensor = is;
        return this;
    };
    /**
     * Sets the density of the collider being built.
     *
     * @param density - The density to set, must be greater or equal to 0. A density of 0 means that this collider
     *                  will not affect the mass or angular inertia of the rigid-body it is attached to.
     */
    ColliderDesc.prototype.setDensity = function (density) {
        this.density = density;
        return this;
    };
    /**
     * Sets the restitution coefficient of the collider to be created.
     *
     * @param restitution - The restitution coefficient in `[0, 1]`. A value of 0 (the default) means no bouncing behavior
     *                   while 1 means perfect bouncing (though energy may still be lost due to numerical errors of the
     *                   constraints solver).
     */
    ColliderDesc.prototype.setRestitution = function (restitution) {
        this.restitution = restitution;
        return this;
    };
    /**
     * Sets the friction coefficient of the collider to be created.
     *
     * @param friction - The friction coefficient. Must be greater or equal to 0. This is generally smaller than 1. The
     *                   higher the coefficient, the stronger friction forces will be for contacts with the collider
     *                   being built.
     */
    ColliderDesc.prototype.setFriction = function (friction) {
        this.friction = friction;
        return this;
    };
    /**
     * Sets the rule used to combine the friction coefficients of two colliders
     * colliders involved in a contact.
     *
     * @param rule − The combine rule to apply.
     */
    ColliderDesc.prototype.setFrictionCombineRule = function (rule) {
        this.frictionCombineRule = rule;
        return this;
    };
    /**
     * Sets the rule used to combine the restitution coefficients of two colliders
     * colliders involved in a contact.
     *
     * @param rule − The combine rule to apply.
     */
    ColliderDesc.prototype.setRestitutionCombineRule = function (rule) {
        this.restitutionCombineRule = rule;
        return this;
    };
    /**
     * Sets the collision groups used by this collider.
     *
     * Two colliders will interact iff. their collision groups are compatible.
     * See the documentation of `InteractionGroups` for details on teh used bit pattern.
     *
     * @param groups - The collision groups used for the collider being built.
     */
    ColliderDesc.prototype.setCollisionGroups = function (groups) {
        this.collisionGroups = groups;
        return this;
    };
    /**
     * Sets the solver groups used by this collider.
     *
     * Forces between two colliders in contact will be computed iff their solver
     * groups are compatible.
     * See the documentation of `InteractionGroups` for details on the used bit pattern.
     *
     * @param groups - The solver groups used for the collider being built.
     */
    ColliderDesc.prototype.setSolverGroups = function (groups) {
        this.solverGroups = groups;
        return this;
    };
    /**
     * Set the physics hooks active for this collider.
     *
     * Use this to enable custom filtering rules for contact/intersecstion pairs involving this collider.
     *
     * @param activeHooks - The hooks active for contact/intersection pairs involving this collider.
     */
    ColliderDesc.prototype.setActiveHooks = function (activeHooks) {
        this.activeHooks = activeHooks;
        return this;
    };
    /**
     * Set the events active for this collider.
     *
     * Use this to enable contact and/or intersection event reporting for this collider.
     *
     * @param activeEvents - The events active for contact/intersection pairs involving this collider.
     */
    ColliderDesc.prototype.setActiveEvents = function (activeEvents) {
        this.activeEvents = activeEvents;
        return this;
    };
    /**
     * Set the collision types active for this collider.
     *
     * @param activeCollisionTypes - The hooks active for contact/intersection pairs involving this collider.
     */
    ColliderDesc.prototype.setActiveCollisionTypes = function (activeCollisionTypes) {
        this.activeCollisionTypes = activeCollisionTypes;
        return this;
    };
    return ColliderDesc;
}());
export { ColliderDesc };
//# sourceMappingURL=collider.js.map